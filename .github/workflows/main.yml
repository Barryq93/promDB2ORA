name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install IBM Data Server Driver
        run: |
          wget -q "https://public.dhe.ibm.com/ibmdl/export/pub/software/data/db2/drivers/odbc_cli/linuxx64_odbc_cli.tar.gz" -O ibm.tar.gz
          tar -xzf ibm.tar.gz -C /tmp
          echo "C_INCLUDE_PATH=/tmp/clidriver/include:$C_INCLUDE_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/tmp/clidriver/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      - name: Install CGO dependencies
        run: sudo apt-get update && sudo apt-get install -y gcc g++ libc6-dev
      - uses: actions/setup-go@v4
        with:
          go-version: "1.24"
      - name: Build for Linux
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o db-monitoring-app-linux-amd64 cmd/main.go
          sha256sum db-monitoring-app-linux-amd64 > db-monitoring-app-linux-amd64.sha256
      - uses: actions/upload-artifact@v3
        with:
          name: linux-artifacts
          path: |
            db-monitoring-app-linux-amd64
            db-monitoring-app-linux-amd64.sha256

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install IBM Data Server Driver (Windows)
        run: |
          # Placeholder: Replace with actual Windows driver source or manual upload
          curl -o ibm-driver.zip "https://your-secure-url/ibm_data_server_driver_winx64.zip" --fail || exit 1
          Expand-Archive -Path ibm-driver.zip -DestinationPath C:\clidriver
        env:
          WINDOWS_DRIVER_URL: ${{ secrets.WINDOWS_DRIVER_URL }}
      - uses: actions/setup-go@v4
        with:
          go-version: "1.24"
      - name: Build for Windows
        run: |
          $env:CGO_ENABLED = "1"
          $env:C_INCLUDE_PATH = "C:\clidriver\include;" + $env:C_INCLUDE_PATH
          $env:LIB = "C:\clidriver\lib;" + $env:LIB
          go build -o db-monitoring-app-windows-amd64.exe cmd/main.go
          Get-FileHash -Algorithm SHA256 db-monitoring-app-windows-amd64.exe | Format-List > db-monitoring-app-windows-amd64.exe.sha256
        shell: pwsh
      - uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: |
            db-monitoring-app-windows-amd64.exe
            db-monitoring-app-windows-amd64.exe.sha256

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: linux-artifacts
      - uses: actions/download-artifact@v3
        with:
          name: windows-artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./db-monitoring-app-linux-amd64
          asset_name: db-monitoring-app-linux-amd64
          asset_content_type: application/octet-stream
      - name: Upload Linux Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./db-monitoring-app-linux-amd64.sha256
          asset_name: db-monitoring-app-linux-amd64.sha256
          asset_content_type: text/plain
      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./db-monitoring-app-windows-amd64.exe
          asset_name: db-monitoring-app-windows-amd64.exe
          asset_content_type: application/octet-stream
      - name: Upload Windows Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./db-monitoring-app-windows-amd64.exe.sha256
          asset_name: db-monitoring-app-windows-amd64.exe.sha256
          asset_content_type: text/plain